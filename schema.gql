# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  email: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MyCollectionType {
  id: ID!
  totalLiteraryWorks: Float!
  completeLiteraryWorks: Float!
  collectionValue: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TokenType {
  token: String!
  role: String!
  name: String!
}

type Author {
  id: ID!
  name: String!
  imageUrl: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  registeredBy: String!
  updatedBy: String!
}

type Internationalization {
  id: ID!
  language: String!
  synopsis: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LiteraryWorkType {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  registeredBy: String!
  updatedBy: String!
  language: Language!
  synopsis: String!
  country: String!
  bagShape: String!
  publisher: String!
  dimensions: String!
  imageUrl: String!
  status: Status!
  categories: String!
  edition: Edition!
  type: Type!
  paperType: PaperType!
  ilustratorBy: String!
  writterBy: String!
  startOfPublication: DateTime!
  endOfPublication: DateTime
  originalPublisher: String!
  releaseFrequency: String!
}

enum Language {
  ptBR
  enUS
}

enum Status {
  Complete
  InProgress
  Hiatus
}

enum Edition {
  omnibus
  bunkoban
  tankobon
  shinsoban
  wideBan
  kanzenban
  kyukyokuban
  fullColor
  deluxe
  Soshuhen
}

enum Type {
  japaneseComicBook
  comicBook
  book
}

enum PaperType {
  newsPrint
  offset
  chamois
  couche
  pollen
}

type VolumeType {
  id: ID!
  synopsis: String!
  language: String!
  coverPriceUnit: String!
  coverPrice: Float!
  number: Float!
  imageUrl: String!
  publication: DateTime!
  paperType: String!
  type: String!
  dimensions: String!
  edition: String!
  country: String!
  categories: String!
}

type Query {
  user: User!
  myCollection: MyCollectionType!
  author(id: String!): Author!
  internationalization(id: String!): Internationalization!
  getAllLiteraryWorks(input: getAllLiteraryWork!): [LiteraryWorkType!]!
  LiteraryWork(input: GetLiteraryWorkInput!): LiteraryWorkType!
  getAllVolumes(input: getAllVolume!): [VolumeType!]!
  Volume(input: GetVolumeInput!): VolumeType!
}

input getAllLiteraryWork {
  offset: Int!
  limit: Int!
  language: Language!
}

input GetLiteraryWorkInput {
  id: ID!
  language: Language!
}

input getAllVolume {
  offset: Int!
  limit: Int!
  language: Language!
}

input GetVolumeInput {
  id: ID!
  language: Language!
}

type Mutation {
  updateUser(input: UpdateUserInput!): String!
  deleteUser: Boolean!
  deleteMyCollection: Boolean!
  loginUser(input: LoginInput!): TokenType!
  createAuthor(input: CreateUserInput!): Author!
  updateAuthor(input: UpdateAuthorInput!): String!
  deleteAuthor(id: String!): Boolean!
  createInternationalization(input: CreateInternationalizationInput!): Internationalization!
  updateInternationalization(input: UpdateInternationalizationInput!): String!
  deleteInternationalization(id: String!): Boolean!
  createLiteraryWork(input: CreateLiteraryWorkInput!): LiteraryWorkType!
  updateLiteraryWork(input: UpdateLiteraryWorkInput!): String!
  deleteLiteraryWork(id: String!): Boolean!
  createVolume(input: CreateVolumeInput!): VolumeType!
  updateVolume(input: UpdateVolumeInput!): String!
  deleteVolume(id: String!): Boolean!
}

input UpdateUserInput {
  id: ID!
  email: String!
  name: String!
  password: String
}

input LoginInput {
  reqTokenId: String!
}

input CreateUserInput {
  name: String!
  imageUrl: String!
}

input UpdateAuthorInput {
  id: ID!
  name: String!
  imageUrl: String!
}

input CreateInternationalizationInput {
  language: Language!
  synopsis: String!
  literaryWork: String
}

input UpdateInternationalizationInput {
  id: ID!
  language: String!
  synopsis: String!
  edition: String!
  type: String!
  paperType: String!
  country: String!
}

input CreateLiteraryWorkInput {
  name: String!
  bagShape: String!
  language: Language!
  publisher: String!
  originalPublisher: String!
  dimensions: String!
  imageUrl: String!
  status: Status!
  country: String!
  categories: String!
  edition: Edition!
  type: Type!
  paperType: PaperType!
  ilustratorBy: String!
  writterBy: String!
  releaseFrequency: String!
  startOfPublication: DateTime!
  endOfPublication: DateTime
}

input UpdateLiteraryWorkInput {
  id: ID!
  name: String!
  bagShape: String!
  language: Language!
  publisher: String!
  originalPublisher: String!
  dimensions: String!
  imageUrl: String!
  status: Status!
  country: String!
  categories: String!
  edition: Edition!
  type: Type!
  paperType: PaperType!
  ilustratorBy: String!
  writterBy: String!
  releaseFrequency: String!
  startOfPublication: DateTime!
  endOfPublication: DateTime!
}

input CreateVolumeInput {
  language: Language!
  dimensions: String!
  coverPriceUnit: Coin!
  coverPrice: Float!
  number: Float!
  imageUrl: String!
  publication: DateTime!
  paperType: PaperType!
  literaryWork: String!
}

enum Coin {
  BRL
  USD
  EUR
  JPY
}

input UpdateVolumeInput {
  id: ID!
  dimensions: String!
  language: String!
  coverPriceUnit: String!
  coverPrice: Float!
  number: Float!
  imageUrl: String!
  publication: DateTime!
  paperType: String!
  literaryWork: String!
}
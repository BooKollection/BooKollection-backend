# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type VolumeType {
  id: ID!
  name: String!
  synopsis: String!
  language: String!
  coverPriceUnit: String!
  coverPrice: String!
  number: Float!
  imageUrl: String!
  publication: DateTime!
  paperType: String!
  type: String!
  dimensions: String!
  edition: String!
  country: String!
  categories: String!
  haveVolume: Boolean
  purchasedPrice: String
  purchasedDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserVolumeType {
  id: ID!
  purchasedPrice: Float!
  purchasedDate: DateTime!
  purchasedPriceUnit: Coin!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum Coin {
  BRL
  USD
  EUR
  JPY
}

type Query {
  getAllVolumes(input: getAllVolume!): [VolumeType!]!
  Volume(input: GetVolumeInput!): VolumeType!
  getAllUserVolumes(input: getAllVolume!): [UserVolumeType!]!
  UserVolume(id: String!): UserVolumeType!
  getCollectionValue(coin: Coin!): String!
}

input getAllVolume {
  offset: Int!
  limit: Int!
  language: Language!
  literaryWork: String
}

enum Language {
  ptBR
  enUS
}

input GetVolumeInput {
  id: ID!
  language: Language!
}

type Mutation {
  createVolume(input: CreateVolumeInput!): VolumeType!
  updateVolume(input: UpdateVolumeInput!): String!
  deleteVolume(id: String!): Boolean!
  createUserVolume(input: CreateUserVolumeInput!): UserVolumeType!
  updateUserVolume(input: UpdateUserVolumeInput!): String!
  deleteUserVolume(volumeId: String!): Boolean!
}

input CreateVolumeInput {
  dimensions: String
  coverPriceUnit: Coin!
  coverPrice: Float!
  number: Float!
  imageUrl: String!
  publication: DateTime!
  paperType: PaperType
  literaryWork: String!
}

enum PaperType {
  newsPrint
  offset
  chamois
  couche
  pollen
}

input UpdateVolumeInput {
  id: ID!
  dimensions: String!
  language: String!
  coverPriceUnit: String!
  coverPrice: Float!
  number: Float!
  imageUrl: String!
  publication: DateTime!
  paperType: String!
  literaryWork: String!
}

input CreateUserVolumeInput {
  purchasedPrice: Float
  purchasedDate: DateTime!
  purchasedPriceUnit: Coin
  volume: String!
}

input UpdateUserVolumeInput {
  purchasedPrice: Float
  purchasedDate: DateTime
  purchasedPriceUnit: Coin
  volume: String!
}